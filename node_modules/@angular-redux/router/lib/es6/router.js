var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { map } from 'rxjs/operators/map';
import { filter } from 'rxjs/operators/filter';
import { distinctUntilChanged } from 'rxjs/operators/distinctUntilChanged';
import { Injectable, ApplicationRef } from '@angular/core';
import { Location } from '@angular/common';
import { Router, NavigationEnd } from '@angular/router';
import { NgRedux } from '@angular-redux/store';
import { UPDATE_LOCATION } from './actions';
let NgReduxRouter = class NgReduxRouter {
    constructor(router, ngRedux, applicationRef, location) {
        this.router = router;
        this.ngRedux = ngRedux;
        this.applicationRef = applicationRef;
        this.location = location;
        this.initialized = false;
        this.selectLocationFromState = state => state.router;
    }
    /**
     * Destroys the bindings between @angular-redux/router and @angular/router.
     * This method unsubscribes from both @angular-redux/router and @angular router, in case
     * your app needs to tear down the bindings without destroying Angular or Redux
     * at the same time.
     */
    destroy() {
        if (this.urlStateSubscription) {
            this.urlStateSubscription.unsubscribe();
        }
        if (this.reduxSubscription) {
            this.reduxSubscription.unsubscribe();
        }
        this.initialized = false;
    }
    /**
     * Initialize the bindings between @angular-redux/router and @angular/router
     *
     * This should only be called once for the lifetime of your app, for
     * example in the constructor of your root component.
     *
     *
     * @param {(state: any) => string} selectLocationFromState Optional: If your
     * router state is in a custom location, supply this argument to tell the
     * bindings where to find the router location in the state.
     * @param {Observable<string>} urlState$ Optional: If you have a custom setup
     * when listening to router changes, or use a different router than @angular/router
     * you can supply this argument as an Observable of the current url state.
     */
    initialize(selectLocationFromState = state => state.router, urlState$ = undefined) {
        if (this.initialized) {
            throw new Error('@angular-redux/router already initialized! If you meant to re-initialize, call destroy first.');
        }
        this.selectLocationFromState = selectLocationFromState;
        this.urlState = urlState$ || this.getDefaultUrlStateObservable();
        this.listenToRouterChanges();
        this.listenToReduxChanges();
        this.initialized = true;
    }
    getDefaultUrlStateObservable() {
        return this.router.events.pipe(filter(event => event instanceof NavigationEnd), map(event => this.location.path()), distinctUntilChanged());
    }
    getLocationFromStore(useInitial = false) {
        return (this.selectLocationFromState(this.ngRedux.getState()) ||
            (useInitial ? this.initialLocation : ''));
    }
    listenToRouterChanges() {
        const handleLocationChange = (location) => {
            if (this.currentLocation === location) {
                // Dont dispatch changes if we haven't changed location.
                return;
            }
            this.currentLocation = location;
            if (this.initialLocation === undefined) {
                this.initialLocation = location;
                // Fetch initial location from store and make sure
                // we dont dispath an event if the current url equals
                // the initial url.
                let locationFromStore = this.getLocationFromStore();
                if (locationFromStore === this.currentLocation) {
                    return;
                }
            }
            this.ngRedux.dispatch({
                type: UPDATE_LOCATION,
                payload: location
            });
        };
        this.urlStateSubscription = this.urlState.subscribe(handleLocationChange);
    }
    listenToReduxChanges() {
        const handleLocationChange = (location) => {
            if (this.initialLocation === undefined) {
                // Wait for router to set initial location.
                return;
            }
            let locationInStore = this.getLocationFromStore(true);
            if (this.currentLocation === locationInStore) {
                // Dont change router location if its equal to the one in the store.
                return;
            }
            this.currentLocation = location;
            this.router.navigateByUrl(location);
        };
        this.reduxSubscription = this.ngRedux
            .select(state => this.selectLocationFromState(state))
            .pipe(distinctUntilChanged())
            .subscribe(handleLocationChange);
    }
};
NgReduxRouter = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [Router,
        NgRedux,
        ApplicationRef,
        Location])
], NgReduxRouter);
export { NgReduxRouter };
//# sourceMappingURL=router.js.map