import { NgRedux } from '@angular-redux/store';
import { Middleware } from 'redux';
import 'rxjs/add/operator/takeUntil';
import { IState, IReducer } from '../interfaces';
export declare type NextEnhancerCallback = (reducer: IReducer, initialState: IState, enhancer: any) => NgRedux<IState>;
/**
 *  Middleware to automatically dispatch async actions when getting an Observable as payload
 *
 * It dispatches a _START action at once,
 * a _NEXT action for every next tick with the result data of the next as payload
 * and a _ERROR action, should the Observable generate an exception.
 *
 * If the initial action includes an Observable in action.meta.cancel, this is used to cancel out the
 * _NEXT actions as soon as this one fires once.
 *
 * @param  store
 * @param  action
 */
export declare const observableMiddleware: any;
/**
 * Wrapper around redux-logger middleware to work with ImmutableJS data structures
 */
export declare const loggerMiddleware: Middleware;
/**
 * Simple middleware to stop actions with an empty type from reaching the rest of the redux logic.
 *
 * @param  store
 */
export declare const removeEmptyActionsMiddleware: any;
