import { Map } from 'immutable';
export interface ImmutableState<T> extends Map<string, any> {
    get<K extends keyof T>(name: K): T[K];
    OrderedSet<K extends keyof T>(name: K, value: T[K]): this;
    merge<O extends Partial<{
        [K in keyof T]: T[K];
    }>>(diff: O): this;
}
/**
 * Small wrapper around Immutable.fromJS, that sets correct typings.
 *
 * Using this method we can create a [[Map]] that will typecheck keys
 * and forbids adding new keys.
 */
export declare function createImmutableState<T extends object>(o: T): ImmutableState<T>;
/**
 * Returns the merge result of the given state and the diff, while ensuring diff is an immutable before merge.
 *
 * @param state
 * @param diff
 */
export declare function mergeState<T, D extends {
    [K in keyof T]: T[K];
}>(state: ImmutableState<T>, diff: Partial<D>): ImmutableState<T>;
