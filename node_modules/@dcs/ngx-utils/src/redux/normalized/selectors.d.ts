import { Schema } from 'normalizr';
import { Selector } from 'reselect';
import { Record } from 'immutable';
import { Constructor, IState } from '../../interfaces';
import { INormalizedCollectionSelectors, INormalizedEntitySelectors } from './interfaces';
/**
 * Creates selectors for a reducer based on a [[INormalizedEntityState]].
 *
 * Provides base selectors for all attributes and also for building a [[Record]] instance out of the raw data
 *
 * @export
 * @param  entityName
 * @param  entityClass The [[Record.Class]] class to build the model from
 * @param  schema The same schema that was used no normalize the data in the first place
 * @param ]
 * @returns
 */
export declare function normalizedEntitySelectorFactory<T extends Record<any>>(entityName: string, entityClass: Constructor<T>, schema: Schema, customSelectors?: {
    [key: string]: Selector<IState, any>;
}): INormalizedEntitySelectors<T>;
/**
 * Creates selectors for a reducer based on a [[INormalizedCollectionState]].
 *
 * Provides base selectors for all attributes and also for building a collection of [[Record]] instances out of the raw data
 *
 * @export
 * @param  entityName
 * @param  entityClass The [[Record.Class]] class to build the models from
 * @param  schema The same schema that was used no normalize the data in the first place
 * @param ]
 * @returns
 */
export declare function normalizedCollectionSelectorsFactory<T extends Record<any>>(entityName: string, entityClass: Constructor<T>, schema: Schema, customSelectors?: {
    [key: string]: Selector<IState, any>;
}): INormalizedCollectionSelectors<T>;
