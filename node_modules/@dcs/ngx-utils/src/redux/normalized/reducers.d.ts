import { IAction, ISubStateReducer } from '../../interfaces';
import { INormalizedCollectionState, INormalizedEntityState } from './interfaces';
export declare function createNormalizedEntityState(): INormalizedEntityState;
/**
 * This creates a reducer with full CRUD functionality for a single entity.
 *
 * Requirement: Data received from API is normalized, see https://github.com/paularmstrong/normalizr
 *
 * @export
 * @param  entityName
 * @param  [namespace]
 * @param [customReducers]
 * @returns
 */
export declare function normalizedEntityReducerFactory(entityName: string, namespace?: string, customReducers?: {
    [key: string]: (state: INormalizedEntityState, action: IAction) => INormalizedEntityState;
}): ISubStateReducer<INormalizedEntityState>;
export declare function createNormalizedCollectionState(): INormalizedCollectionState;
/**
 * This creates a reducer with full CRUD functionality for a collection of entities.
 *
 * Requirement: Data received from API is normalized, see https://github.com/paularmstrong/normalizr
 *
 * @export
 * @param  entityName
 * @param  [namespace]
 * @param [customReducers]
 * @returns
 */
export declare function normalizedCollectionReducerFactory(entityName: string, namespace?: string, customReducers?: {
    [key: string]: (state: INormalizedCollectionState, action: IAction) => INormalizedCollectionState;
}): ISubStateReducer<INormalizedCollectionState>;
