import { List, Map, Record } from 'immutable';
import { Selector } from 'reselect';
import { ImmutableState } from '../reducers';
import { IAction, IState } from '../../interfaces';
export interface ICrudActionNames {
    [key: string]: string;
    read: string;
    readStart: string;
    readNext: string;
    readNextUpdate: string;
    readError: string;
    readOne: string;
    readOneStart: string;
    readOneNext: string;
    readOneNextUpdate: string;
    readOneError: string;
    create: string;
    createStart: string;
    createNext: string;
    createError: string;
    update: string;
    updateStart: string;
    updateNext: string;
    updateError: string;
    delete: string;
    deleteStart: string;
    deleteNext: string;
    deleteError: string;
    setCurrent: string;
    reset: string;
    resetError: string;
}
export declare type INormalizedCollectionState = ImmutableState<{
    result: List<string>;
    entities: Map<string, Map<string, Map<string, any>>>;
    loading: boolean;
    loaded: boolean;
    updating: boolean;
    updatedAt: number;
    error: any;
}>;
export declare type INormalizedEntityState = ImmutableState<{
    result: string;
    entities: Map<string, Map<string, Map<string, any>>>;
    loading: boolean;
    loaded: boolean;
    updating: boolean;
    updatedAt: number;
    error: any;
}>;
export interface INormalizedSelectors {
    loadingSelector: Selector<IState, boolean>;
    loadedSelector: Selector<IState, boolean>;
    updatingSelector: Selector<IState, boolean>;
    updatedAtSelector: Selector<IState, number>;
    [key: string]: Selector<IState, any>;
}
export interface INormalizedCollectionSelectors<T extends Record<any>> extends INormalizedSelectors {
    subStateSelector: Selector<IState, INormalizedCollectionState>;
    idsSelector: Selector<IState, List<string>>;
    modelsSelector: Selector<IState, List<T>>;
    modelsMapSelector: Selector<IState, Map<string, T>>;
}
export interface INormalizedEntitySelectors<T extends Record<any>> extends INormalizedSelectors {
    subStateSelector: Selector<IState, INormalizedEntityState>;
    idSelector: Selector<IState, string>;
    modelSelector: Selector<IState, T>;
}
export interface INormalizedEntityAction extends IAction {
    payload: {
        result: string;
        entities: {
            [key: string]: object;
        };
    };
}
export interface INormalizedCollectionAction extends IAction {
    payload: {
        result: string[];
        entities: {
            [key: string]: object;
        };
    };
}
