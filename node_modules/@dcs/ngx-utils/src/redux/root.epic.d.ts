import { ActionsObservable, EpicMiddleware } from 'redux-observable';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/observable/empty';
import { IAction, IState, IAppEpic, IEpic } from '../interfaces';
export declare function dummyEpic(action$: ActionsObservable<IAction>): Observable<{}>;
/**
 * Wrapper class to activate all injected [[Epic]] instances and forward them to the redux-observable middleware.
 *
 * @export
 */
export declare class RootEpic {
    private epicConfigs;
    middleware: EpicMiddleware<IAction, IState>;
    constructor(epicConfigs: IAppEpic[]);
    /**
     * Returns the Root Epic given to the middleware
     *
     * @returns
     * @memberof RootEpic
     */
    epic(): IAppEpic;
    /**
     * This method collects the [[Epic]] functions from the injected APP_EPICS and extracts the function
     * from [[IEpicClass]] if given.
     *
     * @protected
     * @param  epicConfigs
     * @returns
     * @memberof RootEpic
     */
    protected buildEpics(epicConfigs: IAppEpic[]): IEpic[];
}
