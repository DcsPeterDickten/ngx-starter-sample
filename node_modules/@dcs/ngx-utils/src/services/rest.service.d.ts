import { HttpClient } from '@angular/common/http';
import { Schema } from 'normalizr';
import Ajv from 'ajv';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/catch';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/share';
import { IEnvironment } from '../interfaces';
/**
 * Wrapper class around Angular [[Http]].
 *
 * Adds features like schema validation, normalizing data, base API URL,
 * tracking the number of active requests ...
 *
 * @export
 */
export declare class RestService {
    protected http: HttpClient;
    protected environment: IEnvironment;
    protected _activeRequests: number;
    activeRequests: number;
    constructor(http: HttpClient, environment: IEnvironment);
    /**
     * HTTP GET
     *
     * @param  path
     * @param [options]
     * @param  [schema]
     * @param  [jsonSchemaValidator]
     * @returns
     * @memberof RestService
     */
    get(path: string, options?: any, schema?: Schema, jsonSchemaValidator?: Ajv.ValidateFunction): Observable<any>;
    /**
     * HTTP POST
     *
     * @param  path
     * @param  body
     * @param [options]
     * @param [schema]
     * @param [jsonSchemaValidator]
     * @returns
     * @memberof RestService
     */
    post(path: string, body: any, options?: any, schema?: Schema, jsonSchemaValidator?: Ajv.ValidateFunction): Observable<any>;
    /**
     * HTTP PUT
     *
     * @param  path
     * @param  body
     * @param [options]
     * @param  [schema]
     * @param  [jsonSchemaValidator]
     * @returns
     * @memberof RestService
     */
    put(path: string, body: any, options?: any, schema?: Schema, jsonSchemaValidator?: Ajv.ValidateFunction): Observable<any>;
    /**
     * HTTP DELETE
     *
     * @param  path
     * @param [options]
     * @param  [schema]
     * @param  [jsonSchemaValidator]
     * @returns
     * @memberof RestService
     */
    delete(path: string, options?: any, schema?: Schema, jsonSchemaValidator?: Ajv.ValidateFunction): Observable<any>;
    /**
     * Base method called by the other get/post... methods
     *
     * @protected
     * @param  path
     * @param  requestOptions
     * @param  [schema]
     * @param  [jsonSchemaValidator]
     * @returns
     * @memberof RestService
     */
    protected request(type: string, path: string, requestOptions: any, schema?: Schema, jsonSchemaValidator?: Ajv.ValidateFunction): Observable<any>;
    protected logSchemaErrors(errors: Ajv.ErrorObject[] | null | undefined, responseData: any, path: string, requestOptions: any): void;
    protected getUrl(path: string): string;
    /**
     * If a normalizr schema is given, it returns the normlaized date, the original data otherwise.
     *
     * @param  data
     * @param  [schema]
     * @returns either normalized or the given data.
     */
    protected normalizePayload(data: any, schema?: Schema): any;
    /**
     * Extracts the JSON from an Angular [[Response]]
     *
     * @param  response
     * @returns Whatever the HTTP call returned as JSON
     */
    protected extractResponseData(response: Response): any;
    /**
     * Hook to do some processing of the given options
     *
     * Used mainly to add headers (like auth) or other default options to all requests.
     * Just returns the given options as default
     *
     * @param options
     */
    protected buildRequestOptions(options: any): any;
}
