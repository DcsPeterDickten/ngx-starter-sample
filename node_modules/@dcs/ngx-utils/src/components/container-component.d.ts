import { OnDestroy } from '@angular/core';
import { Subscription } from 'rxjs/Subscription';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/first';
import { INormalizedCollectionState, INormalizedEntityState } from '../redux/normalized/interfaces';
/**
 * Base class for smart/container Components.
 *
 * This is used for Components with store data access.
 *
 * @export
 */
export declare class ContainerComponent implements OnDestroy {
    subscriptions: Subscription[];
    [key: string]: any;
    /**
     * Default OnDestroy callback that unsubscribes from all rxjs Subscriptions of this component.
     *
     * @memberof ContainerComponent
     */
    ngOnDestroy(): void;
    /**
     * Wrapper around [[Observable.subscribe]] that saves the [[Subscription]] to be removed later.
     *
     * @param  obs
     * @param  callback
     * @memberof ContainerComponent
     */
    subscribeToObservable<T>(obs: Observable<T>, callback: (data: T) => void): void;
    /**
     * Shortcut function to always have the current value from an [[Observable]] available in the [[Component]]
     *
     * @param  obs The Observable to get the data from.
     * @param  propertyName The name of the property where to store the data in.
     * @memberof ContainerComponent
     */
    valueFromObservable<T>(obs: Observable<T>, propertyName: string): void;
    /**
     * Helper function to execute a callback only, if a [[INormalizedCollectionState]] has stale data.
     *
     * Usually used to check if the data in a selector is too old and the dispatch the read data action.
     *
     * @param  subState$
     * @param  maxAge
     * @param  callback
     * @memberof ContainerComponent
     */
    executeIfStateStale(subState$: Observable<INormalizedCollectionState | INormalizedEntityState>, maxAge: number, callback: () => void): void;
}
