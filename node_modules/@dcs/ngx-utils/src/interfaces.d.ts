import { Map, List, OrderedMap, Record, Set, OrderedSet } from 'immutable';
import { Epic } from 'redux-observable';
import { Middleware, GenericStoreEnhancer } from 'redux';
export declare type Constructor<T> = new (...args: any[]) => T;
export declare type IAutoUpdateSettings = 'always' | 'confirm' | 'never';
export interface ISettings {
    apiUrl: string;
    apiVersion?: string;
    throwOnSchemaError: boolean;
    autoUpdate: IAutoUpdateSettings;
    updateMessage: string;
    pageTitle: string;
    base: string;
    additionalSettings: object;
}
export interface IEnvironment extends ISettings {
    production: boolean;
    additionalMiddleware?: Middleware[];
    additionalEnhancers?: GenericStoreEnhancer[];
}
export interface IState extends Map<string, any> {
}
export declare type IImmutableObject = Map<string, any> | Record.Factory<any> | OrderedMap<string, any>;
export declare type IImmutableCollection = List<IImmutableObject> | Set<IImmutableObject> | OrderedSet<IImmutableObject>;
export declare type ISubState = IState | List<any> | Set<any> | Record.Factory<any> | number | string | boolean;
export interface IAction {
    type: string;
    payload?: any;
    meta?: {
        [key: string]: any;
    };
}
export interface IReducerClass {
    reducer: () => ISubStateReducer<ISubState>;
}
export declare type ISubStateReducer<T extends ISubState> = (state?: T, action?: IAction) => T;
export interface IReducer extends ISubStateReducer<ISubState> {
}
export interface IReducerConfig {
    name: string;
    reducer: ISubStateReducer<ISubState> | IReducerClass;
}
export declare type IErrorFormatter = (error: any) => string | string;
export interface IErrorFormatterConfig {
    [index: string]: IErrorFormatter;
}
export interface ITranslationConfig {
    name: string;
    translations: any;
}
export interface IEpicClass {
    epic: () => Epic<IAction, IState>;
}
export declare type IEpic = Epic<IAction, IState, any>;
export declare type IAppEpic = IEpic | IEpicClass;
