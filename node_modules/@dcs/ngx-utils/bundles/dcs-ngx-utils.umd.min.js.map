{
  "version": 3,
  "file": "dcs-ngx-utils.umd.min.js",
  "sources": [
    "ng://@dcs/ngx-utils/node_modules/tslib/tslib.es6.js",
    "ng://@dcs/ngx-utils/out/src/redux/normalized/utils.ts",
    "ng://@dcs/ngx-utils/out/src/components/container-component.ts",
    "ng://@dcs/ngx-utils/out/src/components/presentational-component.ts",
    "ng://@dcs/ngx-utils/out/src/redux/store.ts",
    "ng://@dcs/ngx-utils/out/src/redux/middleware.ts",
    "ng://@dcs/ngx-utils/out/src/modules/main-base-module.class.ts",
    "ng://@dcs/ngx-utils/out/src/tokens.ts",
    "ng://@dcs/ngx-utils/out/src/translate/translate.actions.ts",
    "ng://@dcs/ngx-utils/out/src/translate/locale.service.ts",
    "ng://@dcs/ngx-utils/out/src/translate/app-translate.module.ts",
    "ng://@dcs/ngx-utils/out/src/services/rest.service.ts",
    "ng://@dcs/ngx-utils/out/src/services/stable.service.ts",
    "ng://@dcs/ngx-utils/out/src/redux/root.reducer.ts",
    "ng://@dcs/ngx-utils/out/src/redux/root.epic.ts",
    "ng://@dcs/ngx-utils/out/src/redux/redux.module.ts",
    "ng://@dcs/ngx-utils/out/src/ngx-utils.module.ts",
    "ng://@dcs/ngx-utils/out/src/redux/reducers.ts",
    "ng://@dcs/ngx-utils/out/src/redux/normalized/reducers.ts",
    "ng://@dcs/ngx-utils/out/src/random.ts",
    "ng://@dcs/ngx-utils/out/src/utils/default-error-handler.class.ts",
    "ng://@dcs/ngx-utils/out/src/redux/reselect.ts",
    "ng://@dcs/ngx-utils/out/src/redux/normalized/selectors.ts",
    "ng://@dcs/ngx-utils/out/src/utils/immutable.ts",
    "ng://@dcs/ngx-utils/out/src/utils/validators.ts"
  ],
  "sourcesContent": [
    "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n",
    "import {\n  INormalizedCollectionState,\n  INormalizedEntityState,\n  ICrudActionNames,\n} from './interfaces';\n\n/**\n * Generate standardized action names, used mainly for the normalized reducers.\n *\n * For all the CRUD actions all 4 actions (base, start, next, error) are created.\n *\n * @export\n * @param entityName\n * @param [namespace]\n */\nexport function generateCrudActionNames(\n  entityName: string,\n  namespace?: string\n): ICrudActionNames {\n  const BASE_NAME = namespace\n    ? `${namespace.toLocaleUpperCase()}_${entityName.toLocaleUpperCase()}`\n    : entityName.toLocaleUpperCase();\n\n  const START = 'START';\n  const NEXT = 'NEXT';\n  const ERROR = 'ERROR';\n\n  const READ = `${BASE_NAME}_READ`;\n  const READ_ONE = `${BASE_NAME}_READ_ONE`;\n  const CREATE = `${BASE_NAME}_CREATE`;\n  const UPDATE = `${BASE_NAME}_UPDATE`;\n  const DELETE = `${BASE_NAME}_DELETE`;\n\n  return {\n    read: READ,\n    readStart: `${READ}_${START}`,\n    readNext: `${READ}_${NEXT}`,\n    readNextUpdate: `${READ}_${NEXT}_UPDATE`,\n    readError: `${READ}_${ERROR}`,\n\n    readOne: READ_ONE,\n    readOneStart: `${READ_ONE}_${START}`,\n    readOneNext: `${READ_ONE}_${NEXT}`,\n    readOneNextUpdate: `${READ_ONE}_${NEXT}_UPDATE`,\n    readOneError: `${READ_ONE}_${ERROR}`,\n\n    create: CREATE,\n    createStart: `${CREATE}_${START}`,\n    createNext: `${CREATE}_${NEXT}`,\n    createError: `${CREATE}_${ERROR}`,\n\n    update: UPDATE,\n    updateStart: `${UPDATE}_${START}`,\n    updateNext: `${UPDATE}_${NEXT}`,\n    updateError: `${UPDATE}_${ERROR}`,\n\n    delete: DELETE,\n    deleteStart: `${DELETE}_${START}`,\n    deleteNext: `${DELETE}_${NEXT}`,\n    deleteError: `${DELETE}_${ERROR}`,\n\n    setCurrent: `${BASE_NAME}_SET_CURRENT`,\n    reset: `${BASE_NAME}_RESET`,\n    resetError: `${BASE_NAME}_RESET_ERROR`,\n  };\n}\n\n/**\n * Tests if a normalized subState has data that is too old.\n *\n * Given the maxAge, it tests if the data is already loaded and not older than maxAge.\n *\n * @export\n * @param state\n * @param maxAge=0\n */\nexport function subStateStale(\n  state: INormalizedCollectionState | INormalizedEntityState,\n  maxAge: number = 0\n): boolean {\n  const updatedAt = state.get('updatedAt');\n  return updatedAt === 0 || Date.now() - updatedAt - maxAge > 0;\n}\n\n/**\n * Tests if a normalized state has a specific model instace\n *\n * @export\n * @param  collectionSubState the given state\n * @param  entitiesName the name of the collection in entities\n * @param  id the id of the model instance to fetch\n * @param  [maxAge] if the collection is older than maxAge, return that there is no fitting model\n * @returns\n */\nexport function hasModel(\n  collectionSubState: INormalizedCollectionState,\n  entitiesName: string,\n  id: string,\n  maxAge?: number\n): boolean {\n  id = String(id);\n\n  if (maxAge) {\n    const updatedAt: any = collectionSubState.get('updatedAt');\n    const dataCurrent: boolean = Date.now() - updatedAt - maxAge < 0;\n\n    if (!dataCurrent) {\n      return false;\n    }\n  }\n\n  return collectionSubState.hasIn(['entities', entitiesName, id]);\n}\n",
    "import { OnDestroy, Injectable } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/first';\n\nimport {\n  INormalizedCollectionState,\n  INormalizedEntityState,\n} from '../redux/normalized/interfaces';\nimport { subStateStale } from '../redux/normalized/utils';\n\n/**\n * Base class for smart/container Components.\n *\n * This is used for Components with store data access.\n *\n * @export\n */\n@Injectable()\nexport class ContainerComponent implements OnDestroy {\n  public subscriptions: Subscription[] = [];\n  [key: string]: any;\n\n  /**\n   * Default OnDestroy callback that unsubscribes from all rxjs Subscriptions of this component.\n   *\n   * @memberof ContainerComponent\n   */\n  public ngOnDestroy() {\n    this.subscriptions.forEach((subscription: Subscription) => {\n      subscription.unsubscribe();\n    });\n\n    this.subscriptions = [];\n  }\n\n  /**\n   * Wrapper around [[Observable.subscribe]] that saves the [[Subscription]] to be removed later.\n   *\n   * @param  obs\n   * @param  callback\n   * @memberof ContainerComponent\n   */\n  public subscribeToObservable<T>(\n    obs: Observable<T>,\n    callback: (data: T) => void\n  ) {\n    this.subscriptions.push(obs.subscribe(callback.bind(this)));\n  }\n\n  /**\n   * Shortcut function to always have the current value from an [[Observable]] available in the [[Component]]\n   *\n   * @param  obs The Observable to get the data from.\n   * @param  propertyName The name of the property where to store the data in.\n   * @memberof ContainerComponent\n   */\n  public valueFromObservable<T>(obs: Observable<T>, propertyName: string) {\n    this.subscribeToObservable(obs, (data: T) => {\n      this[propertyName] = data;\n    });\n  }\n\n  /**\n   * Helper function to execute a callback only, if a [[INormalizedCollectionState]] has stale data.\n   *\n   * Usually used to check if the data in a selector is too old and the dispatch the read data action.\n   *\n   * @param  subState$\n   * @param  maxAge\n   * @param  callback\n   * @memberof ContainerComponent\n   */\n  public executeIfStateStale(\n    subState$: Observable<INormalizedCollectionState | INormalizedEntityState>,\n    maxAge: number,\n    callback: () => void\n  ): void {\n    subState$.first().subscribe(subState => {\n      if (subStateStale(subState, maxAge)) {\n        callback();\n      }\n    });\n  }\n}\n",
    "import { FormGroup, FormControl } from '@angular/forms';\nimport { Map } from 'immutable';\n\n/**\n * Base class for *dumb* components\n *\n * Data is transfered via Inputs and Outputs, no Store or Actions allowed.\n *\n * @export\n */\nexport class PresentationalComponent {\n  /**\n   * ImmutableJS aware track function\n   *\n   * Mainly used in ngFor trackBy\n   *\n   * @param  index\n   * @param  item\n   * @returns\n   *\n   * @memberOf PresentationalComponent\n   */\n  public identify(_: number, item: Map<string, any>): number {\n    if (typeof item.hashCode !== 'function') {\n      throw new TypeError(\n        `Given item is not of type Immutable, ${item.toString()} given!`\n      );\n    }\n    return item.hashCode();\n  }\n\n  /**\n   * Tests, wether a form component has errors\n   *\n   * @param  form\n   * @param  fieldName\n   * @param  [errorName]\n   * @returns\n   *\n   * @memberOf PresentationalComponent\n   */\n  public hasError(\n    form: FormGroup,\n    fieldName: string,\n    errorName?: string\n  ): boolean {\n    const control: FormControl = <FormControl>form.get(fieldName);\n\n    if (control.untouched) {\n      return false;\n    }\n\n    if (errorName) {\n      return !!(control.errors && control.errors[errorName]);\n    } else {\n      return !!control.errors;\n    }\n  }\n}\n",
    "import {\n  applyMiddleware,\n  compose,\n  createStore,\n  Store,\n  Reducer,\n  Middleware,\n  GenericStoreEnhancer,\n} from 'redux';\nimport { fromJS } from 'immutable';\nimport persistState from 'redux-localstorage';\nimport transit from 'transit-immutable-js';\n\nimport { IState } from '../interfaces';\n\n/**\n * Helper function to setup the redux store with reducers, middleware and enhancers.\n *\n * @export\n * @param  rootReducer\n * @param )]\n * @param  [middleware=[]]\n * @param  [enhancers=[]]\n * @returns\n */\nexport function createReduxStore(\n  rootReducer: Reducer<IState>,\n  initialState: IState = fromJS({}),\n  middleware: Middleware[] = [],\n  enhancers: GenericStoreEnhancer[] = []\n): Store<IState> {\n  return createStore(\n    rootReducer,\n    initialState,\n    compose(applyMiddleware(...middleware), ...enhancers)\n  ) as Store<IState>;\n}\n\n/**\n * Redux [[GenericStoreEnhancer]] that persists all state changes to localStorage,\n * knowing how to handle an ImmutableJS state.\n *\n * @export\n * @returns\n */\nexport function persistStateEnhancer(\n  paths?: string | string[]\n): GenericStoreEnhancer {\n  const converter = transit.withFilter((value: any) => {\n    return !(value instanceof Error);\n  });\n\n  return persistState(paths, {\n    serialize: (state: IState) => converter.toJSON(state),\n    deserialize: (data: string) => converter.fromJSON(data),\n    merge: (initialState: IState, persistedState: IState) =>\n      initialState.merge(persistedState),\n    slicer: (statePaths: undefined | string | string[]) => {\n      return (state: IState) => {\n        if (typeof statePaths === 'string') {\n          return state.filter((_, k) => k === statePaths);\n        } else if (Array.isArray(statePaths)) {\n          return state.filter((_, k) => statePaths.indexOf(k) !== -1);\n        } else {\n          return state;\n        }\n      };\n    },\n  });\n}\n\n/**\n * Selector function to return the current router substate.\n *\n * @export\n * @param  state\n * @returns string\n */\nexport function routerStateSelector(state: IState): string {\n  return state.get('router');\n}\n",
    "import { HttpErrorResponse } from '@angular/common/http';\nimport { NgRedux } from '@angular-redux/store';\nimport { Middleware } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/takeUntil';\n\nimport { IState, IAction, IReducer } from '../interfaces';\n\nexport type NextEnhancerCallback = (\n  reducer: IReducer,\n  initialState: IState,\n  enhancer: any\n) => NgRedux<IState>;\n\n/**\n *  Middleware to automatically dispatch async actions when getting an Observable as payload\n *\n * It dispatches a _START action at once,\n * a _NEXT action for every next tick with the result data of the next as payload\n * and a _ERROR action, should the Observable generate an exception.\n *\n * If the initial action includes an Observable in action.meta.cancel, this is used to cancel out the\n * _NEXT actions as soon as this one fires once.\n *\n * @param  store\n * @param  action\n */\nexport const observableMiddleware: any = (store: NgRedux<IState>) => (\n  next: (action: IAction) => any\n) => (action: IAction) => {\n  if (action.payload instanceof Observable) {\n    const baseType: string = action.type;\n    let obs: Observable<any> = action.payload;\n\n    if (action.meta && action.meta.cancel) {\n      // if the action has a cancel observable, use it\n      obs = obs.takeUntil(action.meta.cancel);\n    }\n\n    store.dispatch({\n      type: `${baseType}_START`,\n      meta: action.meta,\n    });\n\n    obs.subscribe(\n      (data: any) =>\n        store.dispatch({\n          type: `${baseType}_NEXT`,\n          payload: data,\n          meta: action.meta,\n        }),\n      (error: HttpErrorResponse) =>\n        store.dispatch({\n          type: `${baseType}_ERROR`,\n          payload: error,\n          meta: action.meta,\n        }),\n      () => {\n        if (action.meta && action.meta.dispatchCompleted) {\n          store.dispatch({ type: `${baseType}_COMPLETED` });\n        }\n      }\n    );\n  } else {\n    return next(action);\n  }\n};\n\n/**\n * Wrapper around redux-logger middleware to work with ImmutableJS data structures\n */\nexport const loggerMiddleware: Middleware = createLogger({\n  stateTransformer: (state: IState) => (state.toJS ? state.toJS() : state),\n});\n\n/**\n * Simple middleware to stop actions with an empty type from reaching the rest of the redux logic.\n *\n * @param  store\n */\nexport const removeEmptyActionsMiddleware: any = (_: NgRedux<IState>) => (\n  next: (action: IAction) => any\n) => (action: IAction) => {\n  if (action && action.type) {\n    return next(action);\n  }\n};\n",
    "import { Middleware, GenericStoreEnhancer } from 'redux';\nimport { NgRedux, DevToolsExtension } from '@angular-redux/store';\nimport { NgReduxRouter } from '@angular-redux/router';\nimport { Map, fromJS } from 'immutable';\n\nimport { IState, IEnvironment } from '../interfaces';\nimport { RootReducer } from '../redux/root.reducer';\nimport { RootEpic } from '../redux/root.epic';\nimport { StableService } from '../services/stable.service';\nimport { createReduxStore, routerStateSelector } from '../redux/store';\nimport {\n  observableMiddleware,\n  removeEmptyActionsMiddleware,\n} from '../redux/middleware';\n\n/**\n * Base class for an Angular Root Module.\n *\n * This sets up all the basics like redux store, stable tracking, hmr in dev ...\n *\n * @export\n * @abstract\n */\nexport abstract class MainBaseModule {\n  constructor(\n    private store: NgRedux<IState>,\n    private devTools: DevToolsExtension,\n    private rootReducer: RootReducer,\n    private rootEpic: RootEpic,\n    private ngReduxRouter: NgReduxRouter,\n    private environment: IEnvironment,\n    private stableService: StableService\n  ) {\n    let appState: IState | undefined;\n\n    // @ts-ignore\n    if (module.hot && window.hmrData) {\n      // @ts-ignore\n      appState = window.hmrData.appState;\n      // @ts-ignore\n      delete window.hmrData;\n    }\n\n    this.setupStore(appState);\n    this.ngReduxRouter.initialize(routerStateSelector);\n  }\n\n  protected setupStore(appState: IState = Map({})): void {\n    const store = createReduxStore(\n      <any>this.rootReducer.reducer(),\n      fromJS(appState),\n      this.getMiddleware(),\n      this.getEnhancers()\n    );\n\n    this.store.provideStore(store);\n    this.stableService.init();\n  }\n\n  protected getMiddleware(): Middleware[] {\n    let defaultMiddleware = [\n      removeEmptyActionsMiddleware,\n      observableMiddleware,\n      this.rootEpic.middleware,\n    ];\n\n    if (this.environment.additionalMiddleware) {\n      defaultMiddleware = [\n        ...defaultMiddleware,\n        ...this.environment.additionalMiddleware,\n      ];\n    }\n\n    return defaultMiddleware;\n  }\n\n  protected getEnhancers(): GenericStoreEnhancer[] {\n    let defaultEnhancers: GenericStoreEnhancer[] = [];\n\n    if (this.environment.additionalEnhancers) {\n      defaultEnhancers = [\n        ...defaultEnhancers,\n        ...this.environment.additionalEnhancers,\n      ];\n    }\n\n    if (!this.environment.production && this.devTools.isEnabled()) {\n      defaultEnhancers = [...defaultEnhancers, this.devTools.enhancer()];\n    }\n\n    return defaultEnhancers;\n  }\n}\n",
    "import { InjectionToken } from '@angular/core';\nimport {\n  IEnvironment,\n  IReducerConfig,\n  IErrorFormatterConfig,\n  ITranslationConfig,\n  IAppEpic,\n} from './interfaces';\n\nexport const APP_REDUCERS: InjectionToken<IReducerConfig> = new InjectionToken(\n  'APP_REDUCERS'\n);\nexport const APP_EPICS: InjectionToken<IAppEpic> = new InjectionToken(\n  'APP_EPICS'\n);\n\nexport const APP_ERROR_FORMATTERS: InjectionToken<\n  IErrorFormatterConfig\n> = new InjectionToken('APP_ERROR_FORMATTERS');\n\nexport const APP_TRANSLATIONS: InjectionToken<\n  ITranslationConfig\n> = new InjectionToken('APP_TRANSLATIONS');\n\nexport const APP_ENVIRONMENT: InjectionToken<IEnvironment> = new InjectionToken(\n  'APP_ENVIRONMENT'\n);\n",
    "import { Injectable } from '@angular/core';\nimport { dispatch } from '@angular-redux/store';\n\nimport { IAction } from '../interfaces';\n\nexport const TRANSLATE_SET_LOCALE: string = 'TRANSLATE_SET_LOCALE';\n\n@Injectable()\nexport class TranslateActions {\n  @dispatch()\n  public setLocale(locale: string): IAction {\n    return {\n      type: TRANSLATE_SET_LOCALE,\n      payload: locale\n    };\n  }\n}\n",
    "import { Injectable } from '@angular/core';\nimport { TranslateService, LangChangeEvent } from '@ngx-translate/core';\n\nimport { TranslateActions } from './translate.actions';\n\n@Injectable()\nexport class LocaleService {\n  constructor(\n    private translateActions: TranslateActions,\n    private translateService: TranslateService\n  ) {}\n\n  public setup() {\n    this.translateService.onLangChange.subscribe((event: LangChangeEvent) => {\n      this.translateActions.setLocale(event.lang);\n    });\n  }\n}\n",
    "import { NgModule, Inject, LOCALE_ID } from '@angular/core';\nimport { TranslateService, TranslateModule } from '@ngx-translate/core';\n\nimport { APP_TRANSLATIONS } from '../tokens';\nimport { TranslateActions } from './translate.actions';\nimport { LocaleService } from './locale.service';\n\n@NgModule({\n  exports: [TranslateModule],\n  imports: [TranslateModule.forRoot()],\n  providers: [\n    TranslateActions,\n    LocaleService,\n    { provide: APP_TRANSLATIONS, useValue: { name: 'en', translations: {} }, multi: true }\n  ]\n})\nexport class AppTranslateModule {\n  constructor(\n    private translate: TranslateService,\n    @Inject(LOCALE_ID) private appLocale: string,\n    @Inject(APP_TRANSLATIONS) private translations: Array<{ name: string; translations: any }>\n  ) {\n    this.setupTranslations();\n  }\n\n  public setupTranslations() {\n    this.translations.forEach((translation: { name: string; translations: any }) => {\n      this.translate.setTranslation(translation.name, translation.translations, true);\n    });\n\n    this.translate.setDefaultLang(this.appLocale);\n    this.translate.use(this.appLocale);\n  }\n}\n",
    "import { Injectable, Inject } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Schema, normalize } from 'normalizr';\n// @ts-ignore\nimport Ajv from 'ajv';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/share';\n\nimport { IEnvironment } from '../interfaces';\nimport { APP_ENVIRONMENT } from '../tokens';\n\n/**\n * Wrapper class around Angular [[Http]].\n *\n * Adds features like schema validation, normalizing data, base API URL,\n * tracking the number of active requests ...\n *\n * @export\n */\n@Injectable()\nexport class RestService {\n  // tslint:disable-next-line:variable-name\n  protected _activeRequests: number = 0;\n\n  get activeRequests(): number {\n    return this._activeRequests;\n  }\n\n  set activeRequests(num: number) {\n    this._activeRequests = num;\n  }\n\n  constructor(\n    protected http: HttpClient,\n    @Inject(APP_ENVIRONMENT) protected environment: IEnvironment\n  ) {}\n\n  /**\n   * HTTP GET\n   *\n   * @param  path\n   * @param [options]\n   * @param  [schema]\n   * @param  [jsonSchemaValidator]\n   * @returns\n   * @memberof RestService\n   */\n  public get(\n    path: string,\n    options: any = {},\n    schema?: Schema,\n    jsonSchemaValidator?: Ajv.ValidateFunction\n  ): Observable<any> {\n    return this.request('get', path, options, schema, jsonSchemaValidator);\n  }\n\n  /**\n   * HTTP POST\n   *\n   * @param  path\n   * @param  body\n   * @param [options]\n   * @param [schema]\n   * @param [jsonSchemaValidator]\n   * @returns\n   * @memberof RestService\n   */\n  public post(\n    path: string,\n    body: any,\n    options: any = {},\n    schema?: Schema,\n    jsonSchemaValidator?: Ajv.ValidateFunction\n  ): Observable<any> {\n    options = { ...options, body };\n    return this.request('post', path, options, schema, jsonSchemaValidator);\n  }\n\n  /**\n   * HTTP PUT\n   *\n   * @param  path\n   * @param  body\n   * @param [options]\n   * @param  [schema]\n   * @param  [jsonSchemaValidator]\n   * @returns\n   * @memberof RestService\n   */\n  public put(\n    path: string,\n    body: any,\n    options: any = {},\n    schema?: Schema,\n    jsonSchemaValidator?: Ajv.ValidateFunction\n  ): Observable<any> {\n    options = { ...options, body };\n    return this.request('put', path, options, schema, jsonSchemaValidator);\n  }\n\n  /**\n   * HTTP DELETE\n   *\n   * @param  path\n   * @param [options]\n   * @param  [schema]\n   * @param  [jsonSchemaValidator]\n   * @returns\n   * @memberof RestService\n   */\n  public delete(\n    path: string,\n    options: any = {},\n    schema?: Schema,\n    jsonSchemaValidator?: Ajv.ValidateFunction\n  ): Observable<any> {\n    return this.request('delete', path, options, schema, jsonSchemaValidator);\n  }\n\n  /**\n   * Base method called by the other get/post... methods\n   *\n   * @protected\n   * @param  path\n   * @param  requestOptions\n   * @param  [schema]\n   * @param  [jsonSchemaValidator]\n   * @returns\n   * @memberof RestService\n   */\n  protected request(\n    type: string,\n    path: string,\n    requestOptions: any,\n    schema?: Schema,\n    jsonSchemaValidator?: Ajv.ValidateFunction\n  ): Observable<any> {\n    const url: string = this.getUrl(path);\n    requestOptions = this.buildRequestOptions(requestOptions);\n    this.activeRequests++;\n\n    return this.http\n      .request(type, url, requestOptions)\n      .map((data: any) => {\n        if (jsonSchemaValidator) {\n          const valid = jsonSchemaValidator(data);\n          if (!valid) {\n            this.logSchemaErrors(\n              jsonSchemaValidator.errors,\n              data,\n              path,\n              requestOptions\n            );\n            if (this.environment.throwOnSchemaError) {\n              throw new Error('Schema validation failed');\n            }\n          }\n        }\n        return data;\n      })\n      .map((data: any) => this.normalizePayload(data, schema))\n      .map((data: any) => {\n        this.activeRequests--;\n        return data;\n      })\n      .catch((error: HttpErrorResponse) => {\n        this.activeRequests--;\n        throw error;\n      })\n      .share();\n  }\n\n  protected logSchemaErrors(\n    errors: Ajv.ErrorObject[] | null | undefined,\n    responseData: any,\n    path: string,\n    requestOptions: any\n  ): void {\n    if (errors && errors.length) {\n      const css =\n        'color: red; background-color: #ffe6e6; border: 1px solid #ff9999; padding: 1px 10px';\n      console.group('%cSchema validation failed', css);\n      console.log('Request:', path, requestOptions);\n      console.log('Response Data:', responseData);\n      console.group('%cErrors:', css);\n      errors.forEach(error => {\n        console.log(error);\n      });\n      console.groupEnd();\n      console.groupEnd();\n    }\n  }\n\n  protected getUrl(path: string): string {\n    let url: string;\n    if (path.startsWith('http') || path.startsWith('//')) {\n      url = path;\n    } else {\n      url = `${this.environment.apiUrl}/${path}`;\n    }\n\n    return url;\n  }\n\n  /**\n   * If a normalizr schema is given, it returns the normlaized date, the original data otherwise.\n   *\n   * @param  data\n   * @param  [schema]\n   * @returns either normalized or the given data.\n   */\n  protected normalizePayload(data: any, schema?: Schema) {\n    if (schema) {\n      return normalize(data, schema);\n    }\n\n    return data;\n  }\n\n  /**\n   * Extracts the JSON from an Angular [[Response]]\n   *\n   * @param  response\n   * @returns Whatever the HTTP call returned as JSON\n   */\n  protected extractResponseData(response: Response): any {\n    let payload: any;\n\n    try {\n      payload = response.json();\n    } catch (e) {\n      payload = {};\n    }\n\n    return payload;\n  }\n\n  /**\n   * Hook to do some processing of the given options\n   *\n   * Used mainly to add headers (like auth) or other default options to all requests.\n   * Just returns the given options as default\n   *\n   * @param options\n   */\n  protected buildRequestOptions(options: any): any {\n    return options;\n  }\n}\n",
    "import { Injectable } from '@angular/core';\nimport { NgRedux } from '@angular-redux/store';\nimport { Observable } from 'rxjs/Observable';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport 'rxjs/add/operator/distinctUntilChanged';\n\nimport { RestService } from './rest.service';\nimport { IState } from '../interfaces';\n\n/**\n * Angular Service to inform the application wether the state is currently stable.\n *\n * Stable is defined currently by not having any open HTTP requests and no store updates.\n */\n@Injectable()\nexport class StableService {\n  /**\n   * Subscribe to this [[Observable]] to receive stable/unstable events.\n   *\n   * @memberof StableService\n   */\n  public storeStable$: Observable<boolean>;\n  private onStoreStable$: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(private http: RestService, private store: NgRedux<IState>) {\n    this.storeStable$ = this.onStoreStable$.distinctUntilChanged();\n  }\n\n  public init() {\n    this.store.subscribe(() => {\n      window.storeStable = false;\n      this.onStoreStable$.next(false);\n\n      if (this.http.activeRequests === 0) {\n        window.storeStable = true;\n        this.onStoreStable$.next(true);\n      }\n    });\n  }\n}\n",
    "import { Injectable, Inject } from '@angular/core';\nimport { combineReducers } from 'redux-immutable';\nimport { enableBatching } from 'redux-batched-actions';\n\nimport { IReducer, IReducerConfig, IReducerClass } from '../interfaces';\nimport { APP_REDUCERS } from '../tokens';\n\n/**\n * Class that builds the root reducer for redux from all injected [[APP_REDUCERS]].\n *\n * @export\n */\n@Injectable()\nexport class RootReducer {\n  private currentReducers: any = {};\n\n  constructor(@Inject(APP_REDUCERS) private reducerConfigs: IReducerConfig[]) {}\n\n  /**\n   *\n   *\n   * @param  [newReducerConfigs]\n   * @returns\n   * @memberof RootReducer\n   */\n  public reducer(newReducerConfigs?: IReducerConfig[]): IReducer {\n    return enableBatching(\n      combineReducers(this.buildReducers(newReducerConfigs))\n    ) as IReducer;\n  }\n\n  /**\n   * Builds the root reducer.\n   *\n   * @param  [newReducerConfigs]\n   * @returns\n   * @memberof RootReducer\n   */\n  public buildReducers(newReducerConfigs?: IReducerConfig[]) {\n    const currentReducers = Object.assign({}, this.currentReducers);\n    const reducerConfigs: IReducerConfig[] = newReducerConfigs\n      ? newReducerConfigs\n      : this.reducerConfigs;\n\n    this.currentReducers = reducerConfigs.reduce((r, config) => {\n      if (typeof (config.reducer as IReducerClass).reducer === 'function') {\n        r[config.name] = (config.reducer as IReducerClass).reducer();\n      } else {\n        r[config.name] = config.reducer;\n      }\n\n      return r;\n    }, currentReducers);\n\n    return this.currentReducers;\n  }\n}\n",
    "import { Injectable, Inject } from '@angular/core';\nimport {\n  combineEpics,\n  ActionsObservable,\n  createEpicMiddleware,\n  EpicMiddleware,\n} from 'redux-observable';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/mergeMap';\nimport 'rxjs/add/observable/empty';\n\nimport { IAction, IState, IAppEpic, IEpic, IEpicClass } from '../interfaces';\nimport { APP_EPICS } from '../tokens';\n\n// create one noop epic to fill provider with at least one value\n// for epics docs see https://redux-observable.js.org/\nexport function dummyEpic(action$: ActionsObservable<IAction>) {\n  return action$.mergeMap(() => {\n    return Observable.empty();\n  });\n}\n\n/**\n * Wrapper class to activate all injected [[Epic]] instances and forward them to the redux-observable middleware.\n *\n * @export\n */\n@Injectable()\nexport class RootEpic {\n  public middleware: EpicMiddleware<IAction, IState>;\n\n  constructor(@Inject(APP_EPICS) private epicConfigs: IAppEpic[]) {\n    const epics = this.buildEpics(epicConfigs);\n    this.middleware = createEpicMiddleware(combineEpics(...epics));\n  }\n\n  /**\n   * Returns the Root Epic given to the middleware\n   *\n   * @returns\n   * @memberof RootEpic\n   */\n  public epic(): IAppEpic {\n    return combineEpics(...this.epicConfigs);\n  }\n\n  /**\n   * This method collects the [[Epic]] functions from the injected APP_EPICS and extracts the function\n   * from [[IEpicClass]] if given.\n   *\n   * @protected\n   * @param  epicConfigs\n   * @returns\n   * @memberof RootEpic\n   */\n  protected buildEpics(epicConfigs: IAppEpic[]): IEpic[] {\n    return epicConfigs.map(config => {\n      if ((<IEpicClass>config).epic) {\n        return (<IEpicClass>config).epic();\n      } else {\n        return config as IEpic;\n      }\n    });\n  }\n}\n",
    "import { NgModule } from '@angular/core';\nimport { routerReducer } from '@angular-redux/router';\n\nimport { RootReducer } from './root.reducer';\nimport { RootEpic, dummyEpic } from './root.epic';\nimport { APP_EPICS, APP_REDUCERS } from '../tokens';\n\n@NgModule({\n  providers: [\n    RootReducer,\n    RootEpic,\n    {\n      multi: true,\n      provide: APP_REDUCERS,\n      useValue: { name: 'router', reducer: routerReducer },\n    },\n    { provide: APP_EPICS, useValue: dummyEpic, multi: true },\n  ],\n})\nexport class ReduxModule {}\n",
    "import { NgModule } from '@angular/core';\nimport { AppTranslateModule } from './translate/app-translate.module';\nimport { StableService } from './services/stable.service';\nimport { RestService } from './services/rest.service';\nimport { ReduxModule } from './redux/redux.module';\n\n@NgModule({\n  imports: [AppTranslateModule, ReduxModule],\n  exports: [AppTranslateModule, ReduxModule],\n  providers: [StableService, RestService]\n})\nexport class NgxUtilsModule {}\n",
    "import { fromJS, Map } from 'immutable';\n\nexport interface ImmutableState<T> extends Map<string, any> {\n  get<K extends keyof T>(name: K): T[K];\n  OrderedSet<K extends keyof T>(name: K, value: T[K]): this;\n  merge<O extends Partial<{ [K in keyof T]: T[K] }>>(diff: O): this;\n}\n\n/**\n * Small wrapper around Immutable.fromJS, that sets correct typings.\n *\n * Using this method we can create a [[Map]] that will typecheck keys\n * and forbids adding new keys.\n */\nexport function createImmutableState<T extends object>(o: T) {\n  return fromJS(o) as ImmutableState<T>;\n}\n\n/**\n * Returns the merge result of the given state and the diff, while ensuring diff is an immutable before merge.\n *\n * @param state\n * @param diff\n */\nexport function mergeState<T, D extends { [K in keyof T]: T[K] }>(\n  state: ImmutableState<T>,\n  diff: Partial<D>\n): ImmutableState<T> {\n  return state.merge(fromJS(diff));\n}\n",
    "import { fromJS, Map } from 'immutable';\n\nimport { mergeState, createImmutableState } from '../reducers';\nimport { IAction, ISubStateReducer } from '../../interfaces';\nimport {\n  INormalizedCollectionState,\n  INormalizedCollectionAction,\n  INormalizedEntityAction,\n  INormalizedEntityState,\n} from './interfaces';\nimport { generateCrudActionNames } from './utils';\n\nexport function createNormalizedEntityState(): INormalizedEntityState {\n  return createImmutableState({\n    result: '',\n    entities: Map() as any,\n    loading: false,\n    loaded: false,\n    updating: false,\n    updatedAt: 0,\n    error: null,\n  });\n}\n\n/**\n * This creates a reducer with full CRUD functionality for a single entity.\n *\n * Requirement: Data received from API is normalized, see https://github.com/paularmstrong/normalizr\n *\n * @export\n * @param  entityName\n * @param  [namespace]\n * @param [customReducers]\n * @returns\n */\nexport function normalizedEntityReducerFactory(\n  entityName: string,\n  namespace?: string,\n  customReducers?: {\n    [key: string]: (\n      state: INormalizedEntityState,\n      action: IAction\n    ) => INormalizedEntityState;\n  }\n): ISubStateReducer<INormalizedEntityState> {\n  const initialState: INormalizedEntityState = createNormalizedEntityState();\n\n  return function(\n    state: INormalizedEntityState = initialState,\n    action: IAction\n  ): INormalizedEntityState {\n    const actionNames = generateCrudActionNames(entityName, namespace);\n\n    const defaultReducers = {\n      [actionNames.readOneStart]: (s: INormalizedEntityState, a: IAction) => {\n        return mergeState(initialState, { loading: true });\n      },\n      [actionNames.readOneNext]: (\n        s: INormalizedEntityState,\n        a: INormalizedEntityAction\n      ) => {\n        return mergeState(s, {\n          loading: false,\n          loaded: true,\n          updatedAt: Date.now(),\n          entities: fromJS(a.payload.entities),\n          result: a.payload.result,\n        });\n      },\n      [actionNames.readOneError]: (s: INormalizedEntityState, a: IAction) => {\n        return mergeState(initialState, {\n          error: a.payload,\n        });\n      },\n      [actionNames.createStart]: (s: INormalizedEntityState, a: IAction) => {\n        return mergeState(s, { updating: true, error: null });\n      },\n      [actionNames.createNext]: (\n        s: INormalizedEntityState,\n        a: INormalizedEntityAction\n      ) => {\n        return mergeState(s, {\n          updating: false,\n          loaded: true,\n          updatedAt: Date.now(),\n          entities: fromJS(a.payload.entities),\n          result: a.payload.result,\n        });\n      },\n      [actionNames.createError]: (s: INormalizedEntityState, a: IAction) => {\n        return mergeState(initialState, { updating: false, error: a.payload });\n      },\n      [actionNames.updateStart]: (s: INormalizedEntityState, a: IAction) => {\n        return mergeState(s, { updating: true, error: null });\n      },\n      [actionNames.updateNext]: (\n        s: INormalizedEntityState,\n        a: INormalizedEntityAction\n      ) => {\n        return mergeState(s, {\n          updating: false,\n          loaded: true,\n          updatedAt: Date.now(),\n          entities: fromJS(a.payload.entities),\n          result: a.payload.result,\n        });\n      },\n      [actionNames.updateError]: (s: INormalizedEntityState, a: IAction) => {\n        return mergeState(s, { updating: false, error: a.payload });\n      },\n      [actionNames.deleteStart]: (s: INormalizedEntityState, a: IAction) => {\n        return mergeState(s, { updating: true, error: null });\n      },\n      [actionNames.deleteNext]: (s: INormalizedEntityState, a: IAction) => {\n        return initialState;\n      },\n      [actionNames.deleteError]: (s: INormalizedEntityState, a: IAction) => {\n        return mergeState(s, { updating: false, error: a.payload });\n      },\n      [actionNames.setCurrent]: (\n        s: INormalizedEntityState,\n        a: INormalizedEntityAction\n      ) => {\n        return mergeState(initialState, {\n          loaded: true,\n          entities: fromJS(a.payload.entities),\n          result: a.payload.result,\n        });\n      },\n      [actionNames.reset]: (s: INormalizedEntityState, a: IAction) => {\n        return initialState;\n      },\n      [actionNames.resetError]: (s: INormalizedEntityState, a: IAction) => {\n        return s.set('error', null);\n      },\n    };\n\n    const reducers = Object.assign({}, defaultReducers, customReducers);\n\n    if (reducers[action.type]) {\n      return reducers[action.type](state, action);\n    }\n\n    return state;\n  };\n}\n\nexport function createNormalizedCollectionState(): INormalizedCollectionState {\n  return createImmutableState({\n    result: [] as any,\n    entities: {} as any,\n    loading: false,\n    loaded: false,\n    updating: false,\n    updatedAt: 0,\n    error: null,\n  });\n}\n\n/**\n * This creates a reducer with full CRUD functionality for a collection of entities.\n *\n * Requirement: Data received from API is normalized, see https://github.com/paularmstrong/normalizr\n *\n * @export\n * @param  entityName\n * @param  [namespace]\n * @param [customReducers]\n * @returns\n */\nexport function normalizedCollectionReducerFactory(\n  entityName: string,\n  namespace?: string,\n  customReducers?: {\n    [key: string]: (\n      state: INormalizedCollectionState,\n      action: IAction\n    ) => INormalizedCollectionState;\n  }\n): ISubStateReducer<INormalizedCollectionState> {\n  const initialState: INormalizedCollectionState = createNormalizedCollectionState();\n\n  return function(\n    state: INormalizedCollectionState = initialState,\n    action: IAction\n  ): INormalizedCollectionState {\n    const actionNames = generateCrudActionNames(entityName, namespace);\n\n    const defaultReducers = {\n      [actionNames.readStart]: (s: INormalizedCollectionState, a: IAction) => {\n        return mergeState(initialState, { loading: true });\n      },\n      [actionNames.readNext]: (\n        s: INormalizedCollectionState,\n        a: INormalizedCollectionAction\n      ) => {\n        return mergeState(s, {\n          loading: false,\n          loaded: true,\n          updatedAt: Date.now(),\n          entities: fromJS(action.payload.entities),\n          result: action.payload.result,\n        });\n      },\n      [actionNames.readError]: (s: INormalizedCollectionState, a: IAction) => {\n        return mergeState(initialState, { error: a.payload });\n      },\n      [actionNames.createStart]: (\n        s: INormalizedCollectionState,\n        a: IAction\n      ) => {\n        return mergeState(s, { updating: true, error: null });\n      },\n      [actionNames.createNext]: (\n        s: INormalizedCollectionState,\n        a: INormalizedEntityAction\n      ) => {\n        return mergeState(s, {\n          updating: false,\n          entities: s.get('entities').mergeDeep(fromJS(a.payload.entities)),\n          result: s.get('result').push(a.payload.result),\n        });\n      },\n      [actionNames.createError]: (\n        s: INormalizedCollectionState,\n        a: IAction\n      ) => {\n        return mergeState(s, {\n          updating: false,\n          error: a.payload,\n        });\n      },\n      [actionNames.updateStart]: (\n        s: INormalizedCollectionState,\n        a: IAction\n      ) => {\n        return mergeState(s, { updating: true, error: null });\n      },\n      [actionNames.updateNext]: (\n        s: INormalizedCollectionState,\n        a: INormalizedEntityAction\n      ) => {\n        return mergeState(s, {\n          updating: false,\n          entities: s.get('entities').mergeDeep(fromJS(a.payload.entities)),\n        });\n      },\n      [actionNames.updateError]: (\n        s: INormalizedCollectionState,\n        a: IAction\n      ) => {\n        return mergeState(s, {\n          updating: false,\n          error: a.payload,\n        });\n      },\n      [actionNames.deleteStart]: (\n        s: INormalizedCollectionState,\n        a: IAction\n      ) => {\n        return mergeState(s, { updating: true, error: null });\n      },\n      [actionNames.deleteNext]: (\n        s: INormalizedCollectionState,\n        a: INormalizedEntityAction\n      ) => {\n        return mergeState(s, {\n          updating: false,\n          entities: s.get('entities').deleteIn([entityName, a.payload.result]),\n          result: s\n            .get('result')\n            .update(ids => ids.filterNot(id => id === a.payload.result)),\n        });\n      },\n      [actionNames.deleteError]: (\n        s: INormalizedCollectionState,\n        a: IAction\n      ) => {\n        return mergeState(s, {\n          updating: false,\n          error: a.payload,\n        });\n      },\n      [actionNames.reset]: (s: INormalizedCollectionState, a: IAction) => {\n        return initialState;\n      },\n      [actionNames.resetError]: (s: INormalizedCollectionState, a: IAction) => {\n        return s.set('error', null);\n      },\n    };\n\n    const reducers = Object.assign({}, defaultReducers, customReducers);\n\n    if (reducers[action.type]) {\n      return reducers[action.type](state, action);\n    }\n\n    return state;\n  };\n}\n",
    "export function random(): number {\n  return 42;\n}\n",
    "import { ErrorHandler } from '@angular/core';\n\nexport class DefaultErrorHandler implements ErrorHandler {\n  public handleError(error: Error) {\n    // clean up potential broken persisted state if an error bubbles up to the global handler\n    localStorage.clear();\n    throw error;\n  }\n}\n",
    "import { createSelectorCreator, defaultMemoize, createSelector as cs } from 'reselect';\nimport { is } from 'immutable';\n\n/**\n * Small wrapper around reselect [[createSelector]], that knows how to compare ImmutableJS data structures.\n */\nexport const createSelector: typeof cs = createSelectorCreator(defaultMemoize, is);\n",
    "import { denormalize, Schema } from 'normalizr';\nimport { Selector } from 'reselect';\nimport { List, Map, Record } from 'immutable';\n\nimport { Constructor, IState } from '../../interfaces';\nimport {\n  INormalizedCollectionSelectors,\n  INormalizedCollectionState,\n  INormalizedEntityState,\n  INormalizedEntitySelectors,\n} from './interfaces';\nimport { createSelector } from '../reselect';\n\n/**\n * Creates selectors for a reducer based on a [[INormalizedEntityState]].\n *\n * Provides base selectors for all attributes and also for building a [[Record]] instance out of the raw data\n *\n * @export\n * @param  entityName\n * @param  entityClass The [[Record.Class]] class to build the model from\n * @param  schema The same schema that was used no normalize the data in the first place\n * @param ]\n * @returns\n */\nexport function normalizedEntitySelectorFactory<T extends Record<any>>(\n  entityName: string,\n  entityClass: Constructor<T>,\n  schema: Schema,\n  customSelectors: { [key: string]: Selector<IState, any> } = {}\n): INormalizedEntitySelectors<T> {\n  const baseSelector = (state: IState): INormalizedEntityState =>\n    state.get(entityName);\n  const idSelector = (state: IState): string =>\n    baseSelector(state).get('result');\n  const entitiesSelector = (state: IState): Map<string, Map<string, any>> =>\n    baseSelector(state).get('entities');\n\n  const modelSelector = createSelector(\n    [idSelector, entitiesSelector],\n    (id: string, entities: Map<string, Map<string, Map<string, any>>>) => {\n      if (id) {\n        const denormalizedData = denormalize(id, schema, entities);\n        return new entityClass(denormalizedData);\n      } else {\n        return new entityClass();\n      }\n    }\n  );\n\n  return Object.assign(\n    {},\n    {\n      subStateSelector: baseSelector,\n      loadingSelector: (state: IState): boolean =>\n        baseSelector(state).get('loading'),\n      loadedSelector: (state: IState): boolean =>\n        baseSelector(state).get('loaded'),\n      updatingSelector: (state: IState): boolean =>\n        baseSelector(state).get('updating'),\n      updatedAtSelector: (state: IState): number =>\n        baseSelector(state).get('updatedAt'),\n      idSelector,\n      modelSelector,\n    },\n    customSelectors\n  );\n}\n\n/**\n * Creates selectors for a reducer based on a [[INormalizedCollectionState]].\n *\n * Provides base selectors for all attributes and also for building a collection of [[Record]] instances out of the raw data\n *\n * @export\n * @param  entityName\n * @param  entityClass The [[Record.Class]] class to build the models from\n * @param  schema The same schema that was used no normalize the data in the first place\n * @param ]\n * @returns\n */\nexport function normalizedCollectionSelectorsFactory<T extends Record<any>>(\n  entityName: string,\n  entityClass: Constructor<T>,\n  schema: Schema,\n  customSelectors: { [key: string]: Selector<IState, any> } = {}\n): INormalizedCollectionSelectors<T> {\n  const baseSelector = (state: IState): INormalizedCollectionState =>\n    state.get(entityName);\n  const idsSelector = (state: IState): List<string> =>\n    baseSelector(state).get('result');\n  const entitiesSelector = (state: IState): Map<string, Map<string, any>> =>\n    baseSelector(state).get('entities');\n\n  const modelsSelector = createSelector(\n    [idsSelector, entitiesSelector],\n    (\n      ids: List<string>,\n      entities: Map<string, Map<string, Map<string, any>>>\n    ) => {\n      const denormalizedData = denormalize(ids, schema, entities);\n      return denormalizedData.map(\n        (item: Map<string, any>) => new entityClass(item)\n      );\n    }\n  );\n\n  const modelsMapSelector = createSelector([modelsSelector], models => {\n    return models.reduce((acc: Map<string, T>, item: T) => {\n      return acc.set(String(item.get('id', null)), item);\n    }, Map());\n  });\n\n  return Object.assign(\n    {},\n    {\n      subStateSelector: baseSelector,\n      loadingSelector: (state: IState): boolean =>\n        baseSelector(state).get('loading'),\n      loadedSelector: (state: IState): boolean =>\n        baseSelector(state).get('loaded'),\n      updatingSelector: (state: IState): boolean =>\n        baseSelector(state).get('updating'),\n      updatedAtSelector: (state: IState): number =>\n        baseSelector(state).get('updatedAt'),\n      idsSelector,\n      modelsSelector,\n      modelsMapSelector,\n    },\n    customSelectors\n  );\n}\n",
    "import { List, fromJS } from 'immutable';\nimport { Constructor } from '../interfaces';\n\nexport function EmbeddedRecord(recordClass: any) {\n  return function(target: any, key: string): any {\n    const cache = new WeakMap();\n\n    return {\n      get() {\n        if (!cache.has(this)) {\n          cache.set(this, new recordClass(this.get(key)));\n        }\n        return cache.get(this);\n      }\n    };\n  };\n}\n\nexport function EmbeddedCollection(\n  recordClass: any,\n  collectionFactory: any = List\n) {\n  return function(target: any, key: string): any {\n    const cache = new WeakMap();\n\n    return {\n      get() {\n        if (!cache.has(this)) {\n          const collection = this.get(key) || collectionFactory();\n          cache.set(\n            this,\n            collectionFactory(\n              collection.map((data: any) => new recordClass(data))\n            )\n          );\n        }\n        return cache.get(this);\n      }\n    };\n  };\n}\n\nexport function ExtendedRecord<TBase extends Constructor<{}>>(Base: TBase) {\n  type Params = Partial<TBase>;\n\n  return class extends Base {\n    public merge: any;\n\n    constructor(...args: any[]) {\n      const params: Params = fromJS(args.shift());\n      super(params, ...args);\n    }\n\n    public with(params: Params) {\n      return this.merge(fromJS(params)) as this;\n    }\n  };\n}\n",
    "import { FormControl } from '@angular/forms';\nimport { isInt, isFQDN, isMobilePhone, isEmail } from 'validator';\nimport { parse, isValid } from 'date-fns';\n\nexport function validateEmail(c: FormControl) {\n  return isEmail(String(c.value)) ? null : { validateEmail: { valid: false } };\n}\n\nexport function validatePhone(c: FormControl) {\n  return isMobilePhone(String(c.value), 'de-DE')\n    ? null\n    : { validatePhone: { valid: false } };\n}\n\nexport function validateFQDN(c: FormControl) {\n  return isFQDN(String(c.value)) ? null : { validateFQDN: { valid: false } };\n}\n\nexport function validatePositiveInteger(c: FormControl) {\n  const value: string = String(c.value);\n  return isInt(value, { min: 1 })\n    ? null\n    : { validatePositiveInteger: { valid: false } };\n}\n\nexport function validateDate(c: FormControl) {\n  const value: Date = parse(c.value, 'YYYY-MM-DD', 0);\n  return isValid(value) ? null : { validateDate: { valid: false } };\n}\n\nexport function validateTime(c: FormControl) {\n  const value: Date = parse(c.value, 'HH:mm', 0);\n  return isValid(value) ? null : { validateTime: { valid: false } };\n}\n"
  ],
  "names": [
    "extendStatics",
    "Object",
    "setPrototypeOf",
    "__proto__",
    "Array",
    "d",
    "b",
    "p",
    "hasOwnProperty",
    "__metadata",
    "metadataKey",
    "metadataValue",
    "Reflect",
    "metadata",
    "__read",
    "o",
    "n",
    "m",
    "Symbol",
    "iterator",
    "r",
    "e",
    "i",
    "call",
    "ar",
    "next",
    "done",
    "push",
    "value",
    "error",
    "__spread",
    "arguments",
    "length",
    "concat",
    "generateCrudActionNames",
    "entityName",
    "namespace",
    "BASE_NAME",
    "toLocaleUpperCase",
    "START",
    "NEXT",
    "ERROR",
    "READ",
    "READ_ONE",
    "CREATE",
    "UPDATE",
    "DELETE",
    "read",
    "readStart",
    "readNext",
    "readNextUpdate",
    "readError",
    "readOne",
    "readOneStart",
    "readOneNext",
    "readOneNextUpdate",
    "readOneError",
    "create",
    "createStart",
    "createNext",
    "createError",
    "update",
    "updateStart",
    "updateNext",
    "updateError",
    "delete",
    "deleteStart",
    "deleteNext",
    "deleteError",
    "setCurrent",
    "reset",
    "resetError",
    "subStateStale",
    "state",
    "maxAge",
    "updatedAt",
    "get",
    "Date",
    "now",
    "ContainerComponent",
    "this",
    "subscriptions",
    "prototype",
    "ngOnDestroy",
    "forEach",
    "subscription",
    "unsubscribe",
    "subscribeToObservable",
    "obs",
    "callback",
    "subscribe",
    "bind",
    "valueFromObservable",
    "propertyName",
    "_this",
    "data",
    "executeIfStateStale",
    "subState$",
    "first",
    "subState",
    "PresentationalComponent",
    "identify",
    "_",
    "item",
    "hashCode",
    "hasError",
    "form",
    "fieldName",
    "errorName",
    "control",
    "untouched",
    "errors",
    "createReduxStore",
    "rootReducer",
    "initialState",
    "middleware",
    "enhancers",
    "observableMiddleware",
    "store",
    "action",
    "baseType_1",
    "type",
    "payload",
    "meta",
    "takeUntil",
    "dispatch",
    "removeEmptyActionsMiddleware",
    "MainBaseModule",
    "devTools",
    "rootEpic",
    "ngReduxRouter",
    "environment",
    "stableService",
    "appState",
    "window",
    "hmrData",
    "setupStore",
    "Map",
    "getMiddleware",
    "defaultMiddleware",
    "additionalMiddleware",
    "tslib_1.__spread",
    "getEnhancers",
    "defaultEnhancers",
    "additionalEnhancers",
    "production",
    "isEnabled",
    "enhancer",
    "APP_ERROR_FORMATTERS",
    "InjectionToken",
    "APP_TRANSLATIONS",
    "APP_ENVIRONMENT",
    "locale",
    "TranslateActions",
    "Injectable",
    "decorators",
    "target",
    "key",
    "desc",
    "c",
    "getOwnPropertyDescriptor",
    "decorate",
    "defineProperty",
    "translateActions",
    "translateService",
    "onLangChange",
    "event",
    "setLocale",
    "lang",
    "LocaleService",
    "ctorParameters",
    "AppTranslateModule",
    "translate",
    "appLocale",
    "translations",
    "setupTranslations",
    "translation",
    "setTranslation",
    "name",
    "setDefaultLang",
    "NgModule",
    "args",
    "exports",
    "TranslateModule",
    "imports",
    "forRoot",
    "providers",
    "provide",
    "useValue",
    "multi",
    "TranslateService",
    "RestService",
    "http",
    "_activeRequests",
    "set",
    "num",
    "request",
    "path",
    "requestOptions",
    "schema",
    "jsonSchemaValidator",
    "url",
    "getUrl",
    "buildRequestOptions",
    "activeRequests",
    "map",
    "logSchemaErrors",
    "throwOnSchemaError",
    "Error",
    "normalizePayload",
    "share",
    "responseData",
    "css",
    "console",
    "group",
    "log",
    "groupEnd",
    "normalize",
    "options",
    "StableService",
    "onStoreStable$",
    "BehaviorSubject",
    "storeStable$",
    "distinctUntilChanged",
    "storeStable",
    "NgRedux",
    "RootReducer",
    "reducerConfigs",
    "reducer",
    "newReducerConfigs",
    "enableBatching",
    "combineReducers",
    "buildReducers",
    "currentReducers",
    "assign",
    "config",
    "Inject",
    "APP_REDUCERS",
    "RootEpic",
    "epicConfigs",
    "combineEpics",
    "apply",
    "APP_EPICS",
    "ɵ0$1",
    "routerReducer",
    "ɵ1",
    "dummyEpic",
    "ReduxModule",
    "createImmutableState",
    "fromJS",
    "mergeState",
    "diff",
    "merge",
    "createNormalizedEntityState",
    "baseName",
    "customReducers",
    "_a",
    "actionNames",
    "defaultReducers",
    "s",
    "a",
    "loading",
    "loaded",
    "entities",
    "result",
    "updating",
    "reducers",
    "createNormalizedCollectionState",
    "mergeDeep",
    "deleteIn",
    "ids",
    "filterNot",
    "id",
    "entityClass",
    "customSelectors",
    "baseSelector",
    "idSelector",
    "modelSelector",
    "createSelector",
    "denormalizedData",
    "denormalize",
    "idsSelector",
    "modelsSelector",
    "modelsMapSelector",
    "models",
    "reduce",
    "acc",
    "collectionSubState",
    "entitiesName",
    "String",
    "hasIn",
    "paths",
    "converter",
    "transit",
    "withFilter",
    "persistState",
    "serialize",
    "toJSON",
    "deserialize",
    "fromJSON",
    "persistedState",
    "slicer",
    "statePaths",
    "filter",
    "k",
    "isArray",
    "indexOf",
    "ajv",
    "Ajv",
    "allErrors",
    "compile",
    "jsonSchema",
    "recordClass",
    "cache",
    "WeakMap",
    "collectionFactory",
    "List",
    "collection",
    "Base",
    "_super",
    "__",
    "constructor",
    "params",
    "class_1",
    "isMobilePhone"
  ],
  "mappings": "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"
}
